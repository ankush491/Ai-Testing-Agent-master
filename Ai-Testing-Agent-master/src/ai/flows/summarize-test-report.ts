'use server';

/**
 * @fileOverview Summarizes test reports generated by Playwright.
 *
 * - summarizeTestReport - A function that takes raw test results and returns a summarized report.
 * - SummarizeTestReportInput - The input type for the summarizeTestReport function.
 * - SummarizeTestReportOutput - The return type for the summarizeTestReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeTestReportInputSchema = z.object({
  testResults: z
    .string()
    .describe('Raw test results from Playwright, in string format.'),
});
export type SummarizeTestReportInput = z.infer<typeof SummarizeTestReportInputSchema>;

const SummarizeTestReportOutputSchema = z.object({
  summary: z.string().describe('A concise summary of the test results.'),
  actions: z.string().describe('List of actions it has performed for the testing')
});
export type SummarizeTestReportOutput = z.infer<typeof SummarizeTestReportOutputSchema>;

export async function summarizeTestReport(input: SummarizeTestReportInput): Promise<SummarizeTestReportOutput> {
  return summarizeTestReportFlow(input);
}

const summarizeTestReportPrompt = ai.definePrompt({
  name: 'summarizeTestReportPrompt',
  input: {schema: SummarizeTestReportInputSchema},
  output: {schema: SummarizeTestReportOutputSchema},
  prompt: `You are an AI test agent. Summarize the following test report and list actions it performed for the testing. The actions should be returned in the "actions" field. Use the "summary" field to provide a short summary.

Test Report:
{{{testResults}}}`,
});

const summarizeTestReportFlow = ai.defineFlow(
  {
    name: 'summarizeTestReportFlow',
    inputSchema: SummarizeTestReportInputSchema,
    outputSchema: SummarizeTestReportOutputSchema,
  },
  async input => {
    const {output} = await summarizeTestReportPrompt(input);
    return output!;
  }
);
